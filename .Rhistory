match_number = rowSums(.['match_1':'match_8']))
}
control_list <- list()
names(cities)
names(cities[[1]])
names(cities)[[1]]
control_list <- list()
for (i in cities) {
city <- cities[[i]]
control_city <- find_city(city, control)
control_city %<>%
filter(match_number >= 5)
control_list[[i]] <- control_city
names(control_list)[[i]] <- names(cities)[[i]]
}
for (i in 1:length(cities)) {
city <- cities[[i]]
control_city <- find_city(city, control)
control_city %<>%
filter(match_number >= 5)
control_list[[i]] <- control_city
names(control_list)[[i]] <- names(cities)[[i]]
}
find_city <- function(treated, control) {
control %<>%
mutate(match_1 = ifelse(between(varindex_grp[[1]], treated[paste0(varindex_grp[[1]])]-1, treated[paste0(varindex_grp[[1]])]+1), 1, 0),
match_2 = ifelse(between(varindex_grp[[2]], treated[paste0(varindex_grp[[2]])]-1, treated[paste0(varindex_grp[[2]])]+1), 1, 0),
match_3 = ifelse(between(varindex_grp[[3]], treated[paste0(varindex_grp[[3]])]-1, treated[paste0(varindex_grp[[3]])]+1), 1, 0),
match_4 = ifelse(between(varindex_grp[[4]], treated[paste0(varindex_grp[[4]])]-1, treated[paste0(varindex_grp[[4]])]+1), 1, 0),
match_5 = ifelse(between(varindex_grp[[5]], treated[paste0(varindex_grp[[5]])]-1, treated[paste0(varindex_grp[[5]])]+1), 1, 0),
match_6 = ifelse(between(varindex_grp[[6]], treated[paste0(varindex_grp[[6]])]-1, treated[paste0(varindex_grp[[6]])]+1), 1, 0),
match_7 = ifelse(between(varindex_grp[[7]], treated[paste0(varindex_grp[[7]])]-1, treated[paste0(varindex_grp[[7]])]+1), 1, 0),
match_8 = ifelse(between(varindex_grp[[8]], treated[paste0(varindex_grp[[8]])]-1, treated[paste0(varindex_grp[[8]])]+1), 1, 0),
match_number = rowSums(across('match_1':'match_8'), na.rm = T))
}
control_list <- list()
for (i in 1:length(cities)) {
city <- cities[[i]]
control_city <- find_city(city, control)
control_city %<>%
filter(match_number >= 5)
control_list[[i]] <- control_city
names(control_list)[[i]] <- names(cities)[[i]]
}
View(control_list)
treated <- cities[[1]]
control %<>%
mutate(match_1 = ifelse(between(varindex_grp[[1]], treated[paste0(varindex_grp[[1]])]-1, treated[paste0(varindex_grp[[1]])]+1), 1, 0),
match_2 = ifelse(between(varindex_grp[[2]], treated[paste0(varindex_grp[[2]])]-1, treated[paste0(varindex_grp[[2]])]+1), 1, 0),
match_3 = ifelse(between(varindex_grp[[3]], treated[paste0(varindex_grp[[3]])]-1, treated[paste0(varindex_grp[[3]])]+1), 1, 0),
match_4 = ifelse(between(varindex_grp[[4]], treated[paste0(varindex_grp[[4]])]-1, treated[paste0(varindex_grp[[4]])]+1), 1, 0),
match_5 = ifelse(between(varindex_grp[[5]], treated[paste0(varindex_grp[[5]])]-1, treated[paste0(varindex_grp[[5]])]+1), 1, 0),
match_6 = ifelse(between(varindex_grp[[6]], treated[paste0(varindex_grp[[6]])]-1, treated[paste0(varindex_grp[[6]])]+1), 1, 0),
match_7 = ifelse(between(varindex_grp[[7]], treated[paste0(varindex_grp[[7]])]-1, treated[paste0(varindex_grp[[7]])]+1), 1, 0),
match_8 = ifelse(between(varindex_grp[[8]], treated[paste0(varindex_grp[[8]])]-1, treated[paste0(varindex_grp[[8]])]+1), 1, 0),
match_number = rowSums(across('match_1':'match_8'), na.rm = T))
control
names(control)
control %>% select(13:28)
View(treated)
treated <- pl_dat %>%
select(name, st, place, varindex, varindex_grp)
control <- pl_dat %>%
select(name, st, place, varindex, varindex_grp)
treated %<>%
filter(name %in% covered)
control %<>%
filter(!name %in% covered)
find_city <- function(treated, control) {
control %<>%
mutate(match_1 = ifelse(between(varindex_grp[[1]], treated[paste0(varindex_grp[[1]])]-1, treated[paste0(varindex_grp[[1]])]+1), 1, 0),
match_2 = ifelse(between(varindex_grp[[2]], treated[paste0(varindex_grp[[2]])]-1, treated[paste0(varindex_grp[[2]])]+1), 1, 0),
match_3 = ifelse(between(varindex_grp[[3]], treated[paste0(varindex_grp[[3]])]-1, treated[paste0(varindex_grp[[3]])]+1), 1, 0),
match_4 = ifelse(between(varindex_grp[[4]], treated[paste0(varindex_grp[[4]])]-1, treated[paste0(varindex_grp[[4]])]+1), 1, 0),
match_5 = ifelse(between(varindex_grp[[5]], treated[paste0(varindex_grp[[5]])]-1, treated[paste0(varindex_grp[[5]])]+1), 1, 0),
match_6 = ifelse(between(varindex_grp[[6]], treated[paste0(varindex_grp[[6]])]-1, treated[paste0(varindex_grp[[6]])]+1), 1, 0),
match_7 = ifelse(between(varindex_grp[[7]], treated[paste0(varindex_grp[[7]])]-1, treated[paste0(varindex_grp[[7]])]+1), 1, 0),
match_8 = ifelse(between(varindex_grp[[8]], treated[paste0(varindex_grp[[8]])]-1, treated[paste0(varindex_grp[[8]])]+1), 1, 0),
match_number = rowSums(across('match_1':'match_8'), na.rm = T))
}
cities <- split(treated, f = treated$name)
control_list <- list()
for (i in 1:length(cities)) {
city <- cities[[i]]
control_for_city <- control
control_city <- find_city(city, control_for_city)
control_city %<>%
filter(match_number >= 5)
control_list[[i]] <- control_city
names(control_list)[[i]] <- names(cities)[[i]]
}
View(control_list)
i <- 1
city <- cities[[i]]
control_for_city <- control
control_city <- find_city(city, control_for_city)
View(control_city)
find_city <- function(treated, control) {
control %<>%
mutate(match_1 = ifelse(between(.[[paste0(varindex_grp[[1]])]], treated[paste0(varindex_grp[[1]])]-1, treated[paste0(varindex_grp[[1]])]+1), 1, 0),
match_2 = ifelse(between(.[[paste0(varindex_grp[[2]])]], treated[paste0(varindex_grp[[2]])]-1, treated[paste0(varindex_grp[[2]])]+1), 1, 0),
match_3 = ifelse(between(.[[paste0(varindex_grp[[3]])]], treated[paste0(varindex_grp[[3]])]-1, treated[paste0(varindex_grp[[3]])]+1), 1, 0),
match_4 = ifelse(between(.[[paste0(varindex_grp[[4]])]], treated[paste0(varindex_grp[[4]])]-1, treated[paste0(varindex_grp[[4]])]+1), 1, 0),
match_5 = ifelse(between(.[[paste0(varindex_grp[[5]])]], treated[paste0(varindex_grp[[5]])]-1, treated[paste0(varindex_grp[[5]])]+1), 1, 0),
match_6 = ifelse(between(.[[paste0(varindex_grp[[6]])]], treated[paste0(varindex_grp[[6]])]-1, treated[paste0(varindex_grp[[6]])]+1), 1, 0),
match_7 = ifelse(between(.[[paste0(varindex_grp[[7]])]], treated[paste0(varindex_grp[[7]])]-1, treated[paste0(varindex_grp[[7]])]+1), 1, 0),
match_8 = ifelse(between(.[[paste0(varindex_grp[[8]])]], treated[paste0(varindex_grp[[8]])]-1, treated[paste0(varindex_grp[[8]])]+1), 1, 0),
match_number = rowSums(across('match_1':'match_8'), na.rm = T))
}
city <- cities[[i]]
control_for_city <- control
control_city <- find_city(city, control_for_city)
control_city
control_city %>% View()
control %<>%
mutate(match_1 = ifelse(.[[paste0(varindex_grp[[1]])]] %in% c(treated[paste0(varindex_grp[[1]])]-1:treated[paste0(varindex_grp[[1]])]+1), 1, 0))},
match_2 = ifelse(between(.[[paste0(varindex_grp[[2]])]], treated[paste0(varindex_grp[[2]])]-1, treated[paste0(varindex_grp[[2]])]+1), 1, 0),
match_3 = ifelse(between(.[[paste0(varindex_grp[[3]])]], treated[paste0(varindex_grp[[3]])]-1, treated[paste0(varindex_grp[[3]])]+1), 1, 0),
match_4 = ifelse(between(.[[paste0(varindex_grp[[4]])]], treated[paste0(varindex_grp[[4]])]-1, treated[paste0(varindex_grp[[4]])]+1), 1, 0),
match_5 = ifelse(between(.[[paste0(varindex_grp[[5]])]], treated[paste0(varindex_grp[[5]])]-1, treated[paste0(varindex_grp[[5]])]+1), 1, 0),
match_6 = ifelse(between(.[[paste0(varindex_grp[[6]])]], treated[paste0(varindex_grp[[6]])]-1, treated[paste0(varindex_grp[[6]])]+1), 1, 0),
match_7 = ifelse(between(.[[paste0(varindex_grp[[7]])]], treated[paste0(varindex_grp[[7]])]-1, treated[paste0(varindex_grp[[7]])]+1), 1, 0),
match_8 = ifelse(between(.[[paste0(varindex_grp[[8]])]], treated[paste0(varindex_grp[[8]])]-1, treated[paste0(varindex_grp[[8]])]+1), 1, 0),
match_number = rowSums(across('match_1':'match_8'), na.rm = T))
find_city <- function(treated, control) {
control %<>%
mutate(match_1 = ifelse(.[[paste0(varindex_grp[[1]])]] %in% c(treated[paste0(varindex_grp[[1]])]-1:treated[paste0(varindex_grp[[1]])]+1), 1, 0))}
city <- cities[[i]]
control_for_city <- control
control_city <- find_city(city, control_for_city)
find_city <- function(treated, control) {
control %<>%
mutate(match_1 = ifelse(.[[paste0(varindex_grp[[1]])]] %in% c(c(treated[paste0(varindex_grp[[1]])]-1):c(treated[paste0(varindex_grp[[1]])]+1)), 1, 0))}
city <- cities[[i]]
control_for_city <- control
control_city <- find_city(city, control_for_city)
city[paste0(varindex_grp[[1]])]
city[1, paste0(varindex_grp[[1]])]
varindex
varindex_grp
find_city <- function(treated, control) {
control %<>%
mutate(m1 = ifelse(between(pop_tot_grp, (treated$pop_tot_grp - 1), (treated$pop_tot_grp + 1)), 1, 0))
}
city <- cities[[i]]
control_for_city <- control
control_city <- find_city(city, control_for_city)
control_city %>% View()
find_city <- function(treated, control) {
control %<>%
mutate(m1 = ifelse(between(pop_tot_grp, (treated$pop_tot_grp - 1), (treated$pop_tot_grp + 1)), 1, 0),
m2 = ifelse(between(pct_whi_grp, (treated$pct_whi_grp - 1), (treated$pct_whi_grp + 1)), 1, 0),
m3 = ifelse(between(pct_college_grp, (treated$pct_college_grp - 1), (treated$pct_college_grp + 1)), 1, 0),
m4 = ifelse(between(med_inc_grp, (treated$med_inc_grp - 1), (treated$med_inc_grp + 1)), 1, 0),
m5 = ifelse(between(pct_h_rent_grp, (treated$pct_h_rent_grp - 1), (treated$pct_h_rent_grp + 1)), 1, 0),
m6 = ifelse(between(pct_h_multi_3more_grp, (treated$pct_h_multi_3more_grp - 1), (treated$pct_h_multi_3more_grp + 1)), 1, 0),
m7 = ifelse(between(med_val_grp, (treated$med_val_grp - 1), (treated$med_val_grp + 1)), 1, 0),
m8 = ifelse(between(med_rent_grp, (treated$med_rent_grp - 1), (treated$med_rent_grp + 1)), 1, 0),
match_number = rowSums(across('m1':'m8'), na.rm = T))
}
cities <- split(treated, f = treated$name)
control_list <- list()
for (i in 1:length(cities)) {
city <- cities[[i]]
control_for_city <- control
control_city <- find_city(city, control_for_city)
control_city %<>%
filter(match_number >= 5)
control_list[[i]] <- control_city
names(control_list)[[i]] <- names(cities)[[i]]
}
control_list
cities <- split(treated, f = treated$name)
control_list <- list()
for (i in 1:length(cities)) {
city <- cities[[i]]
control_for_city <- control
control_city <- find_city(city, control_for_city)
max_match = max(control_city$match_number)
if (max_match >= 5) {
control_city %<>%
filter(match_number >= 5) } else {
control_city %<>%
filter(match_number == max_match)
}
control_list[[i]] <- control_city
names(control_list)[[i]] <- names(cities)[[i]]
}
control_list
cities
names(cities)
# Directories
homedir <- paste0(dirname(rstudioapi::getSourceEditorContext()$path))
homedir
workdir <- paste0("/../raw_text/")
setwd(paste0(homedir, workdir))
setwd(paste0(homedir, workdir))
workdir <- paste0("/raw_text/")
setwd(paste0(homedir, workdir))
# -------------------------------------------------------------------------
# Created by: Iris Zhang
# Date created: Dec 19, 2022
# Last revised:
# Project: 2022-2025 Voting Outreach
# Subproject: Produce descriptive statistics for midterms conversations
# -------------------------------------------------------------------------
# Script Description: ----------------------------------------------------------
# This script cleans GetThru conversation data and produces a separate 'conversation transcript' for each VANID that ever had replies (other than opt-out), and produces threads for opt-outs
# Inputs:
# 1. Week 1, Week 2, and Week 3 files with cleaned and imputed characteristics of participants
# 2. Information from Every Action that has respondent's VANID's, activist codes (treatment state, treatment group, treatment week), and survey responses; merge with # 1
# 3. (the most recent) Week-by-state-by treatment files (3x5x4 = 60), cleaned to only show aggregate stats, merged with #2
# Outputs:
# 1. Cleaned .csv of #2 prior to merge
# 2. Cleaned .csv of #3
# 2. Conversations for analysis of opt-outs in each .txt file by VANID
# Update log:
# Setup: -----------------------------------------------------------------------
# Packages
library("tidyverse") # recall that we use this package to get the dplyr language
library("readr") # for write_csv and read_csv functions
library("data.table") # package for handling large datasets
library("magrittr") # for %<>% operator
# Directories
homedir <- paste0(dirname(rstudioapi::getSourceEditorContext()$path))
workdir <- paste0("/misc_data/")
setwd(paste0(homedir, workdir))
# Import data:
# 1.
weeks <- list.files(path = paste0(getw(), "data_1/"), pattern = ".csv")
# Import data:
# 1.
weeks <- list.files(path = paste0(getwd(), "data_1/"), pattern = ".csv")
getwd()
# Import data:
# 1.
weeks <- list.files(path = paste0(getwd(), "/data_1/"), pattern = ".csv")
weeks <- str_c("/data_1", weeks)
weeks
# Import data:
# 1.
weeks <- list.files(path = paste0(getwd(), "/data_1/"), pattern = ".csv")
weeks <- str_c("/data_1/", weeks)
weeks
# Import data:
# 1.
weeks <- list.files(path = paste0(getwd(), "/data_1/"), pattern = ".csv")
weeks <- str_c(paste0(getwd(), "/data_1/"), weeks)
weeks
data_1_list <- list()
for (i in 1:length(weeks)) {
data_1_list[[i]] <- read_csv(weeks[[i]])
}
data_1 <- rbindlist(data_1_list)
View(data_1)
data_1_list <- list()
for (i in 1:length(weeks)) {
data_1_list[[i]] <- read_csv(weeks[[i]])
}
data_1 <- rbindlist(data_1_list, use.names = T)
rm(data_1_list)
rm(data_1_list, weeks)
# 2.
data_1 <- read_csv("VANID_VARIABLES_20230120.csv")
weeks <- list.files(path = paste0(getwd(), "/data_1/"), pattern = ".csv")
weeks <- str_c(paste0(getwd(), "/data_1/"), weeks)
data_1_list <- list()
for (i in 1:length(weeks)) {
data_1_list[[i]] <- read_csv(weeks[[i]])
}
data_1 <- rbindlist(data_1_list, use.names = T)
rm(data_1_list, weeks)
# 2.
data_2 <- read_csv("VANID_VARIABLES_20230120.csv")
names(data_2)
names(data_1)
names(data_1)
names(data_1)
View(data_1)
# keep only the variables we need -- ADGN, demographics, and measures of their uncertainty
data_1 %<>%
select(VANID, Address, zip, DOB, Gender, gender_invalid, first, surname, white, black, hispanic, asian, otherrace, raceuncertain_below40, raceuncertain_over40, name_invalid, address_na, dob_na)
head(data_1)
head(data_1)
head(data_1$Address)
View(data_1)
weeks <- list.files(path = paste0(getwd(), "/data_1/"), pattern = ".csv")
weeks <- str_c(paste0(getwd(), "/data_1/"), weeks)
data_1_list <- list()
for (i in 1:length(weeks)) {
data_1_list[[i]] <- read_csv(weeks[[i]])
}
data_1 <- rbindlist(data_1_list, use.names = T)
getwd()
weeks
weeks <- list.files(path = paste0(getwd(), "/data_1/"), pattern = ".csv")
weeks
homedir <- paste0(dirname(rstudioapi::getSourceEditorContext()$path))
workdir <- paste0("/misc_data/")
setwd(paste0(homedir, workdir))
knitr::opts_chunk$set(echo = T)
knitr::opts_chunk$set(echo = T)
knitr::opts_knit$set(root.dir = "/misc_data")
weeks <- list.files(path = "/data_1/"), pattern = ".csv")
weeks <- list.files(path = "/data_1/", pattern = ".csv")
weeks
getwd()
weeks <- list.files(path = paste0(getwd(), "/data_1/"), pattern = ".csv")
weeks
paste0(getwd(), "/data_1/")
weeks <- list.files(path = paste0(getwd(), "/data_1/"), pattern = ".csv")
list.files("/Users/ihzhang/Documents/GitHub/Rights-to-Votes/misc_data/data_1/", pattern = ".csv"
)
# 1. Import Week 1, Week 2, and Week 3 files with cleaned and imputed characteristics of participants
getwd()
knitr::opts_knit$set(root.dir = "/misc_data")
# 1. Import Week 1, Week 2, and Week 3 files with cleaned and imputed characteristics of participants
getwd()
```{r, setup, include = F}
knitr::opts_chunk$set(echo = T)
knitr::opts_knit$set(root.dir = "/misc_data")
getwd()
knitr::opts_knit$set(root.dir = "/misc_data")
getwd()
getwd()
# 1. Import Week 1, Week 2, and Week 3 files with cleaned and imputed characteristics of participants
getwd()
knitr::opts_knit$set(root.dir = "/misc_data")
# 1. Import Week 1, Week 2, and Week 3 files with cleaned and imputed characteristics of participants
getwd()
knitr::opts_knit$set(root.dir = "~/misc_data")
# 1. Import Week 1, Week 2, and Week 3 files with cleaned and imputed characteristics of participants
getwd()
# 1. Import Week 1, Week 2, and Week 3 files with cleaned and imputed characteristics of participants
weeks <- list.files(path = paste0(getwd(), "/misc_data/data_1/"), pattern = ".csv")
weeks <- str_c(paste0(getwd(), "/misc_data/data_1/"), weeks)
data_1_list <- list()
for (i in 1:length(weeks)) {
data_1_list[[i]] <- read_csv(weeks[[i]])
}
data_1 <- rbindlist(data_1_list, use.names = T)
# clean environment
rm(data_1_list, weeks)
names(data_1)
head(data_1)
View(data_1)
# keep only the variables we need -- ADGN, demographics, and measures of their uncertainty
data_1 %<>%
select(VANID, address, zip, DOB, Gender, gender_invalid, first, surname, white, black, hispanic, asian, otherrace, raceuncertain_below40, raceuncertain_over40, name_invalid, address_na, dob_na)
head(data_1)
# recode some of these categorical variables
table(data_1$name_invalid, exclude = NULL)
table(data_1$gender_invalid, exclude = NULL)
table(data_1$Gender)
table(data_1$Gender, exclude - NULL)
table(data_1$Gender, exclude = NULL)
table(data_1$address_na, exclude = NULL)
table(data_1$dob_na, exclude = NULL)
data_1 %<>%
mutate(
address = ifelse(address_na == 1, NA, address),
DOB = ifelse(dob_na == 1, NA, DOB),
first = ifelse(name_invalid == 1, NA, first),
Gender = ifelse(gender_invalid == 1, NA,
ifelse(Gender == 0, "F", "M")),
race = case_when(
white == 1 ~ "white",
black == 1 ~ "black",
hispanic == 1 ~ "hispanic",
asian == 1 ~ "asian",
otherrace == 1 ~ "other",
TRUE ~ NA_character_
)) %>%
select(-c(white:otherrace)) # just to reduce unnecessary columns for tidyness
# 2.
data_2 <- read_csv("VANID_VARIABLES_20230120.csv")
# 2.
data_2 <- read_csv("misc_data/VANID_VARIABLES_20230120.csv")
names(data_2)
head(data_2$`UCI_WK1_(UCI)`)
# collapse into categorical variables
data_2 %<>%
mutate(
week = case_when(
`UCI_WK1(UCI)` == "x" ~ "week_1",
`UCI_WK2(UCI)` == "x" ~ "week_2",
`UCI_WK3(UCI)` == "x" ~ "week_3",
TRUE ~ NA_character_
),
state = case_when(
`TState_CA_(UCI)` == "x" ~ "ca",
`TState_MI_(UCI)` == "x" ~ "mi",
`TState_OH_(UCI)` == "x" ~ "oh",
`TState_PA_(UCI)` == "x" ~ "pa",
`TState_TX_(UCI)` == "x" ~ "tx",
TRUE ~ NA_character_
),
treatment = case_when(
`UCI_Control_(UCI)` == "x" ~ "control",
`UCI_T1_(UCI)` == "x" ~ "t1",
`UCI_T2_AT2_(UCI)` == "x" ~ "t2_at2",
`UCI_T2_AT3_(UCI)` == "x" ~ "t2_at3",
`UCI_T3_(UCI)` == "x" ~ "t3",
TRUE ~ NA_character_
)
)
# collapse into categorical variables
data_2 %<>%
mutate(
week = case_when(
`UCI_WK1_(UCI)` == "x" ~ "week_1",
`UCI_WK2_(UCI)` == "x" ~ "week_2",
`UCI_WK3_(UCI)` == "x" ~ "week_3",
TRUE ~ NA_character_
),
state = case_when(
`TState_CA_(UCI)` == "x" ~ "ca",
`TState_MI_(UCI)` == "x" ~ "mi",
`TState_OH_(UCI)` == "x" ~ "oh",
`TState_PA_(UCI)` == "x" ~ "pa",
`TState_TX_(UCI)` == "x" ~ "tx",
TRUE ~ NA_character_
),
treatment = case_when(
`UCI_Control_(UCI)` == "x" ~ "control",
`UCI_T1_(UCI)` == "x" ~ "t1",
`UCI_T2_AT2_(UCI)` == "x" ~ "t2_at2",
`UCI_T2_AT3_(UCI)` == "x" ~ "t2_at3",
`UCI_T3_(UCI)` == "x" ~ "t3",
TRUE ~ NA_character_
)
)
table(data_2$week)
table(data_2$week, exclude = NULL)
table(data_2$state, exclude = NULL)
table(data_2$treatment, exclude = NULL)
# 3. Conversations data ####
convos <- list.files(path = "/misc_data/data_3/", pattern = ".csv")
convos
getwd()
# 3. Conversations data ####
getwd()
convos <- list.files(path = "~/misc_data/data_3/", pattern = ".csv")
convos
convos <- list.files(path = paste0(getwd(), "/misc_data/data_3/"), pattern = ".csv")
convos
convo_list <- list()
for (i in 1:length(convos)) {
convo_list[[i]] <- read_csv(convos[[i]])
}
convos <- str_c("/misc_data/data_3/", convos)
convos
convo_list <- list()
for (i in 1:length(convos)) {
convo_list[[i]] <- read_csv(convos[[i]])
}
# 3. Conversations data ####
convos <- list.files(path = paste0(getwd(), "/misc_data/data_3/"), pattern = ".csv")
convos <- str_c("~/misc_data/data_3/", convos)
convos
convo_list <- list()
for (i in 1:length(convos)) {
convo_list[[i]] <- read_csv(convos[[i]])
}
# 3. Conversations data ####
convos <- list.files(path = paste0(getwd(), "/misc_data/data_3/"), pattern = ".csv")
convos <- str_c(paste0(getwd(), "/misc_data/data_3/"), convos)
convos
convo_list <- list()
for (i in 1:length(convos)) {
convo_list[[i]] <- read_csv(convos[[i]])
}
data_3 <- rbindlist(convo_list, use.names = T)
# de-clutter workspace
rm(convos, convo_list, i)
View(data_3)
table(unique(data_3$campaign_name))
table((data_3$campaign_name)
)
table(unique(data_3$message_direction))
View(data_3)
length(unique(data_3$van_campaign_id))
length(unique(data_1$VANID))
data_3 %>%
filter(message_direction == "incoming")
# what's the distribution by week_state_treatment?
table(data_3$campaign_name)
# how many people did we reach?
length(unique(data_3$van_campaign_id))
# how many messages did we send?
data_3 %>%
filter(message_direction == "outgoing") %>%
nrow()
# how many messages did we get back? generally
data_3 %>%
filter(! message_direction %in% "outgoing") %>%
nrow()
# filtering out butt-dials and voicemails (including media messages)
data_3 %>%
filter(! message_direction %in% c("outgoing", "call", "voicemail")) %>%
nrow()
# what kinds of messages exist?
table(data_3$message_direction, exclude = NULL)
# filtering out butt-dials and voicemails (including media messages)
data_3 %>%
filter(! message_direction %in% c("outgoing", "call", "voicemail")) %>%
nrow()
# ratio of outgoing to incoming
124231/5268
# for every 24 messages we sent, we got one back.
(1/23.58)*100
129704/length(unique(data_3$van_campaign_id))
